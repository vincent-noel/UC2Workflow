# PWD is mandatory due to the wrapped applications
# resolving paths relative to their installation directory..
# THIS SHOULD NOT BE THE CASE!

reps=[1,2]


data_dir=os.environ["PWD"]+"/../../resources/data"
result_dir=os.environ["PWD"]+"/result"

metadata_file=data_dir+"/metadata_small.tsv"


# For better parallelism, we split the metadata file
# This is the folder where the split tsv:s are placed
metadata_dir=os.environ["PWD"]+"/"


samples=[]
with open(metadata_file) as f:
   next(f)
   for line in f:
        samples.append(line.split()[0])

rule physiboss:
    input: 
        multiext(result_dir+"/{sample}/models/{prefix}",".bnd",".cfg")
    output:
        multiext(result_dir+"/{sample}/output_{prefix}_{rep}",".out",".err")
    shell:
        "physiboss -d -i {wildcards.sample} {wildcards.rep} {wildcards.prefix} {input} -o {output} "

checkpoint personalize:
    input:
        result_dir+"/{sample}/norm_data.tsv",
        result_dir+"/{sample}/cells_metadata.tsv",
        os.environ["PWD"]+"/ko_file.txt"
    output:
        directory(result_dir+"/{sample}/models"),
        result_dir+"/{sample,[A-Za-z0-9]+}/personalized_by_cell_type.tsv"
    params:
        # We can not use the input/output as this is not an actual file
        # The interface to the BB is clumsy at the moment. 
        epi=data_dir+"/epithelial_cell_2",
    shell:
        "personalize_patient -d -i {input[0]} {input[1]} {params.epi} Epithelial_cells {input[2]} -o {output}"



rule single_cell:
    input:
        metadata_dir+"{sample}.tsv",
        data_dir
    output:
        result_dir+"/{sample,[A-Za-z0-9._]+}/norm_data.tsv",
        result_dir+"/{sample,[A-Za-z0-9._]+}/cells_metadata.tsv"
        
    shell:
        "single_cell_processing -d -i {input} -o " + os.environ["PWD"]+"/result/"


rule split_metadata:
    input:
        metadata_file
    output:
        expand(metadata_dir+"{sample}.tsv" ,sample=samples)
    shell:
        "./split.sh {input}"
 

rule maboss:
    input:
        data_dir
    output:
        os.environ["PWD"]+"/ko_file.txt"
    shell:
        "maboss -d -i epithelial_cell_2 {input} -o {output}"

def get_personalize(wildcards):
    checkpoints.personalize.get(sample=wildcards.sample)
    prefixs=glob_wildcards("{}/{}/models/{{prefix}}.cfg".format(result_dir,wildcards.sample)).prefix
    return expand(result_dir +"/"+ wildcards.sample+ "/output_{prefix}_{rep}.out",prefix=prefixs,rep=reps)

# Meta rule triggered
# once per sample 
# generates the request for the final files
rule physiboss_aggregate:
    input: get_personalize
    output: os.environ["PWD"] + "/{sample}.touch"
    shell:
        "touch {output}"



# Top rule which is re-evaluated after 
# single_cell has run and we know the number of samples
rule sample_aggregate:
    input: expand(os.environ["PWD"]+"/{sample}.touch",sample=samples)


